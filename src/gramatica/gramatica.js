/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,13],$V2=[7,105],$V3=[9,13],$V4=[1,41],$V5=[1,42],$V6=[13,19,32],$V7=[1,48],$V8=[1,49],$V9=[1,50],$Va=[1,51],$Vb=[1,52],$Vc=[31,76,80,81,82,83],$Vd=[1,65],$Ve=[1,68],$Vf=[1,69],$Vg=[1,66],$Vh=[1,67],$Vi=[1,70],$Vj=[2,67],$Vk=[15,47,49,69,71,74,109],$Vl=[1,86],$Vm=[1,85],$Vn=[1,87],$Vo=[1,83],$Vp=[1,84],$Vq=[1,88],$Vr=[1,89],$Vs=[1,90],$Vt=[29,50],$Vu=[1,104],$Vv=[1,102],$Vw=[1,103],$Vx=[1,105],$Vy=[1,107],$Vz=[1,108],$VA=[1,109],$VB=[1,110],$VC=[1,111],$VD=[1,112],$VE=[1,113],$VF=[1,114],$VG=[1,115],$VH=[1,116],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[26,29,50,57,85,86,87,88,89,90,91,93,94,95,96,97,98],$VM=[57,102],$VN=[1,152],$VO=[1,176],$VP=[2,64],$VQ=[1,167],$VR=[1,168],$VS=[1,169],$VT=[1,178],$VU=[1,179],$VV=[1,177],$VW=[1,171],$VX=[1,173],$VY=[1,174],$VZ=[1,175],$V_=[26,29,50,57,85,89],$V$=[26,29,50,57,85,86,87,89],$V01=[15,19,42,43,44,47,49,51,55,58,69,71,74,75,76,80,81,82,83],$V11=[1,224],$V21=[1,225],$V31=[1,226],$V41=[1,256],$V51=[1,282],$V61=[19,55,58],$V71=[15,47,49,69,70,71,74,109];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"PYTHON":5,"codigo_python":6,"JAVA":7,"codigo_java":8,"PROGRAMA":9,"HOLA":10,"clases":11,"clase":12,"public":13,"class":14,"IDENTIFICADOR":15,"herencia":16,"{":17,"body_class":18,"}":19,"parte_java":20,"declaracion_global_java":21,"metodo_java":22,"constructorl":23,"modificador_java":24,"tipo_java":25,";":26,"(":27,"lista_parametros_java":28,")":29,"listado_java":30,"void":31,"private":32,"sentencias_java":33,"sentencia_java":34,"if_java":35,"declaracion_java":36,"for_java":37,"while_java":38,"do_while_java":39,"asignacion_java":40,"switch_java":41,"continue":42,"break":43,"return":44,"expr":45,"imprimir_java":46,"print":47,"cadena_imprimir":48,"println":49,",":50,"switch":51,"lista_casos_java":52,"default_java":53,"caso_java":54,"case":55,"valor":56,":":57,"default":58,"declaracion_simple":59,"ASIGNAR":60,"tipo_input_java":61,"MAS_ASIGNAR":62,"MENOS_ASIGNAR":63,"MAS":64,"MENOS":65,"intinput":66,"floatinput":67,"charinput":68,"IF":69,"ELSE":70,"for":71,"declaracion_for":72,"incremental_for":73,"while":74,"do":75,"int":76,"INT":77,"parametros_java":78,"parametro_java":79,"String":80,"float":81,"char":82,"boolean":83,"extends":84,"SUMA":85,"POR":86,"ENTRE":87,"POT":88,"RESTA":89,"AND":90,"OR":91,"NOT":92,"IGUAL_IGUAL":93,"DIFERENTE":94,"MAYOR":95,"MAYOR_IGUAL":96,"MENOR":97,"MENOR_IGUAL":98,"STRING":99,"FLOAT":100,"CHAR":101,"SALTO":102,"funciones_python":103,"funcion_python":104,"def":105,"lista_parametros_python":106,"INDENT":107,"sentencias_python":108,"DEDENT":109,"parametros_python":110,"parametros_pythonp":111,"sentencia_python":112,"sentencias_pythonp":113,"asignar":114,"if_python":115,"for_python":116,"print_python":117,"while_python":118,"input":119,"in":120,"range":121,"if_python_cola":122,"elif_python":123,"ELIF":124,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PYTHON",7:"JAVA",9:"PROGRAMA",10:"HOLA",13:"public",14:"class",15:"IDENTIFICADOR",17:"{",19:"}",26:";",27:"(",29:")",31:"void",32:"private",42:"continue",43:"break",44:"return",47:"print",49:"println",50:",",51:"switch",55:"case",57:":",58:"default",60:"ASIGNAR",62:"MAS_ASIGNAR",63:"MENOS_ASIGNAR",64:"MAS",65:"MENOS",66:"intinput",67:"floatinput",68:"charinput",69:"IF",70:"ELSE",71:"for",74:"while",75:"do",76:"int",77:"INT",80:"String",81:"float",82:"char",83:"boolean",84:"extends",85:"SUMA",86:"POR",87:"ENTRE",88:"POT",89:"RESTA",90:"AND",91:"OR",92:"NOT",93:"IGUAL_IGUAL",94:"DIFERENTE",95:"MAYOR",96:"MAYOR_IGUAL",97:"MENOR",98:"MENOR_IGUAL",99:"STRING",100:"FLOAT",101:"CHAR",102:"SALTO",105:"def",107:"INDENT",109:"DEDENT",119:"input",120:"in",121:"range",124:"ELIF"},
productions_: [0,[3,1],[3,7],[8,0],[8,1],[11,2],[11,1],[12,7],[18,2],[18,1],[20,1],[20,1],[20,1],[21,4],[22,9],[22,9],[24,1],[24,1],[33,2],[33,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,2],[34,3],[34,1],[46,5],[46,5],[48,3],[48,1],[41,8],[52,2],[52,1],[54,4],[53,0],[53,3],[36,4],[36,7],[40,4],[40,4],[40,4],[40,3],[40,3],[40,6],[59,0],[59,2],[61,1],[61,1],[61,1],[35,7],[35,11],[35,9],[37,11],[38,7],[39,9],[72,4],[72,3],[73,2],[73,2],[30,0],[30,1],[23,8],[28,0],[28,1],[78,3],[78,1],[79,2],[25,1],[25,1],[25,1],[25,1],[25,1],[16,0],[16,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,3],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,3],[6,0],[6,1],[6,2],[103,2],[103,1],[104,10],[106,0],[106,1],[110,2],[111,0],[111,2],[108,2],[113,0],[113,1],[112,1],[112,1],[112,1],[112,1],[112,1],[117,5],[117,5],[114,4],[114,6],[56,1],[56,1],[56,1],[56,1],[116,11],[118,7],[115,7],[115,8],[122,6],[122,7],[122,1],[123,7],[123,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Vacio");
break;
case 2:
console.log("Encontrados bloques de python y de java")
break;
case 29:
console.log("Retorna "+$$[$0-1]);
break;
case 30:
console.log("Imprime");
break;
case 43:
console.log("Asignacion normal");
break;
case 44:
console.log("Asignacion incremencial +=");
break;
case 45:
console.log("Asignacion decremental -=");
break;
case 46:
console.log("Asignacion ++");
break;
case 47:
console.log("Asignacion --");
break;
case 54:
console.log("encuentra if");
break;
case 55:
console.log("encuentra if-else");
break;
case 56:
console.log("encuentra if-elseif");
break;
case 104:
console.log("otra funcion");
break;
case 105:
console.log("una funcion"); 
break;
case 122:
console.log("una asignacion");
break;
case 123:
console.log("input");
break;
case 127:
console.log("Encuentra char");
break;
case 128:
console.log("Encontrado for");
break;
case 129:
console.log("Encuentra while");
break;
case 130:
 console.log("if"); 
break;
case 131:
 console.log("if-cola"); 
break;
case 132:
 console.log("if-else"); 
break;
case 133:
 console.log("if-elif-else"); 
break;
case 134:
 console.log("if-elif"); 
break;
case 135:
 console.log("elif"); 
break;
case 136:
 console.log("elif-elif"); 
break;
}
},
table: [{3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:4,7:[2,101],102:[1,5]},{7:[1,6]},{7:[2,102],103:7,104:8,105:$V0},{8:10,9:[2,3],11:11,12:12,13:$V1},{7:[2,103],104:14,105:$V0},o($V2,[2,105]),{15:[1,15]},{9:[1,16]},{9:[2,4],12:17,13:$V1},o($V3,[2,6]),{14:[1,18]},o($V2,[2,104]),{27:[1,19]},{10:[1,20]},o($V3,[2,5]),{15:[1,21]},{15:[1,24],29:[2,107],106:22,110:23},{4:[1,25]},{16:26,17:[2,77],84:[1,27]},{29:[1,28]},{29:[2,108]},{29:[2,110],50:[1,30],111:29},{1:[2,2]},{17:[1,31]},{15:[1,32]},{57:[1,33]},{29:[2,109]},{15:[1,34]},{13:$V4,18:35,20:36,21:37,22:38,23:39,24:40,32:$V5},{17:[2,78]},{102:[1,43]},{29:[2,111]},{13:$V4,19:[1,44],20:45,21:37,22:38,23:39,24:40,32:$V5},o($V6,[2,9]),o($V6,[2,10]),o($V6,[2,11]),o($V6,[2,12]),{25:46,31:[1,47],76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($Vc,[2,16],{15:[1,53]}),o($Vc,[2,17]),{107:[1,54]},o($V3,[2,7]),o($V6,[2,8]),{15:[1,55]},{15:[1,56]},{15:[2,72]},{15:[2,73]},{15:[2,74]},{15:[2,75]},{15:[2,76]},{27:[1,57]},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:58,112:59,114:60,115:61,116:62,117:63,118:64},{26:[1,71],27:[1,72]},{27:[1,73]},{25:77,28:74,29:$Vj,76:$V7,78:75,79:76,80:$V8,81:$V9,82:$Va,83:$Vb},{109:[1,78]},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:80,109:[2,113],112:59,113:79,114:60,115:61,116:62,117:63,118:64},o($Vk,[2,115]),o($Vk,[2,116]),o($Vk,[2,117]),o($Vk,[2,118]),o($Vk,[2,119]),{60:[1,81]},{15:$Vl,27:$Vm,45:82,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:[1,91]},{27:[1,92]},{27:[1,93]},{15:$Vl,27:$Vm,45:94,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($V6,[2,13]),{25:77,28:95,29:$Vj,76:$V7,78:75,79:76,80:$V8,81:$V9,82:$Va,83:$Vb},{25:77,28:96,29:$Vj,76:$V7,78:75,79:76,80:$V8,81:$V9,82:$Va,83:$Vb},{29:[1,97]},{29:[2,68],50:[1,98]},o($Vt,[2,70]),{15:[1,99]},o($V2,[2,106]),{109:[2,112]},{109:[2,114]},{56:100,77:$Vu,99:$Vv,100:$Vw,101:$Vx,119:[1,101]},{57:[1,106],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{15:$Vl,27:$Vm,45:120,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:121,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:122,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($VL,[2,95],{27:[1,123]}),o($VL,[2,96]),o($VL,[2,97]),o($VL,[2,98]),o($VL,[2,99]),{120:[1,124]},{15:$Vl,27:$Vm,45:126,48:125,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:126,48:127,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{57:[1,128],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{29:[1,129]},{29:[1,130]},{17:[1,131]},{25:77,76:$V7,79:132,80:$V8,81:$V9,82:$Va,83:$Vb},o($Vt,[2,71]),{102:[1,133]},{27:[1,134]},o($VM,[2,124]),o($VM,[2,125]),o($VM,[2,126]),o($VM,[2,127]),{102:[1,135]},{15:$Vl,27:$Vm,45:136,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:137,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:138,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:139,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:140,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:141,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:142,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:143,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:144,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:145,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:146,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:147,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($VL,[2,93]),o($VL,[2,84]),o($VL,[2,87]),{29:[1,148],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{29:[1,149]},{121:[1,150]},{29:[1,151],50:$VN},o($Vt,[2,34],{85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),{29:[1,153],50:$VN},{102:[1,154]},{17:[1,155]},{17:[1,156]},{15:$VO,19:$VP,25:172,30:157,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($Vt,[2,69]),o($Vk,[2,122]),{29:[1,180]},{107:[1,181]},o($V_,[2,79],{86:$Vz,87:$VA,88:$VB,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($V$,[2,80],{88:$VB,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($V$,[2,81],{88:$VB,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o([26,29,50,57,85,86,87,88,89],[2,82],{90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($V_,[2,83],{86:$Vz,87:$VA,88:$VB,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o([26,29,50,57,85,86,87,88,89,90,91],[2,85],{93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o([26,29,50,57,85,86,87,88,89,91],[2,86],{90:$VD,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($VL,[2,88]),o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,94]),o($VL,[2,100]),{27:[1,182]},{102:[1,183]},{15:$Vl,27:$Vm,45:184,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{102:[1,185]},{107:[1,186]},{15:$VO,19:$VP,25:172,30:187,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{15:$VO,19:$VP,25:172,30:188,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{19:[1,189]},{15:$VO,19:[2,65],25:172,34:190,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($V01,[2,19]),o($V01,[2,20]),o($V01,[2,21]),o($V01,[2,22]),o($V01,[2,23]),o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),{26:[1,191]},{26:[1,192]},{15:$Vl,27:$Vm,45:193,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($V01,[2,30]),{27:[1,194]},{15:[1,195]},{27:[1,196]},{27:[1,197]},{17:[1,198]},{60:[1,199],62:[1,200],63:[1,201],64:[1,202],65:[1,203]},{27:[1,204]},{27:[1,205]},{27:[1,206]},{102:[1,207]},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:208,112:59,114:60,115:61,116:62,117:63,118:64},{29:[1,209]},o($Vk,[2,120]),o($Vt,[2,33],{85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK}),o($Vk,[2,121]),{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:210,112:59,114:60,115:61,116:62,117:63,118:64},{19:[1,211]},{19:[1,212]},o($V6,[2,66]),o($V01,[2,18]),o($V01,[2,27]),o($V01,[2,28]),{26:[1,213],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{15:$Vl,27:$Vm,45:214,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{26:[2,49],59:215,60:[1,216]},{15:[1,219],72:217,76:[1,218]},{15:$Vl,27:$Vm,45:220,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$VO,19:$VP,25:172,30:221,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{15:$Vl,27:$Vm,45:222,61:223,66:$V11,67:$V21,68:$V31,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:227,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:228,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{26:[1,229]},{26:[1,230]},{15:[1,231]},{15:$Vl,27:$Vm,45:126,48:232,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{15:$Vl,27:$Vm,45:126,48:233,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($Vk,[2,123]),{109:[1,234]},{57:[1,235]},{109:[1,236]},o($V6,[2,14]),o($V6,[2,15]),o($V01,[2,29]),{29:[1,237],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{26:[1,238]},{15:$Vl,27:$Vm,45:240,61:239,66:$V11,67:$V21,68:$V31,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{26:[1,241]},{15:[1,242]},{60:[1,243]},{29:[1,244],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{19:[1,245]},{26:[1,246],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{27:[1,247]},{27:[2,51]},{27:[2,52]},{27:[2,53]},{26:[1,248],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{26:[1,249],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},o($V01,[2,46]),o($V01,[2,47]),{29:[1,250]},{29:[1,251],50:$VN},{29:[1,252],50:$VN},o($Vk,[2,130],{122:253,123:255,70:[1,254],124:$V41}),{102:[1,257]},o($Vk,[2,129]),{17:[1,258]},o($V01,[2,41]),{27:[1,259]},{26:[2,50],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{15:$Vl,27:$Vm,45:260,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{60:[1,261]},{77:[1,262]},{17:[1,263]},{74:[1,264]},o($V01,[2,43]),{29:[1,265]},o($V01,[2,44]),o($V01,[2,45]),{17:[1,266]},{26:[1,267]},{26:[1,268]},o($Vk,[2,131]),{57:[1,269]},o($Vk,[2,134],{70:[1,270]}),{15:$Vl,27:$Vm,45:271,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},{107:[1,272]},{15:$VO,19:$VP,25:172,30:273,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{29:[1,274]},{26:[1,275],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{77:[1,276]},{26:[2,61]},{15:$VO,19:$VP,25:172,30:277,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{27:[1,278]},{26:[1,279]},{52:280,54:281,55:$V51},o($V01,[2,31]),o($V01,[2,32]),{102:[1,283]},{57:[1,284]},{57:[1,285],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:286,112:59,114:60,115:61,116:62,117:63,118:64},{19:[1,287]},{26:[1,288]},{15:[1,290],73:289},{26:[2,60]},{19:[1,291]},{15:$Vl,27:$Vm,45:292,77:$Vn,89:$Vo,92:$Vp,99:$Vq,100:$Vr,101:$Vs},o($V01,[2,48]),{19:[2,39],53:293,54:294,55:$V51,58:[1,295]},o($V61,[2,37]),{56:296,77:$Vu,99:$Vv,100:$Vw,101:$Vx},{107:[1,297]},{102:[1,298]},{102:[1,299]},{109:[1,300]},o($V01,[2,54],{70:[1,301]}),o($V01,[2,42]),{29:[1,302]},{64:[1,303],65:[1,304]},o($V01,[2,58]),{29:[1,305],85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:$VJ,98:$VK},{19:[1,306]},o($V61,[2,36]),{57:[1,307]},{57:[1,308]},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:309,112:59,114:60,115:61,116:62,117:63,118:64},{107:[1,310]},{107:[1,311]},o($Vk,[2,128]),{17:[1,312],35:313,69:$VW},{17:[1,314]},{29:[2,62]},{29:[2,63]},{26:[1,315]},o($V01,[2,35]),{15:$VO,25:172,33:316,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{15:$VO,25:172,33:317,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},{109:[1,318]},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:319,112:59,114:60,115:61,116:62,117:63,118:64},{15:$Vd,47:$Ve,49:$Vf,69:$Vg,71:$Vh,74:$Vi,108:320,112:59,114:60,115:61,116:62,117:63,118:64},{15:$VO,19:$VP,25:172,30:321,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($V01,[2,56]),{15:$VO,19:$VP,25:172,30:322,33:158,34:159,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($V01,[2,59]),{15:$VO,19:[2,40],25:172,34:190,35:160,36:161,37:162,38:163,39:164,40:165,41:166,42:$VQ,43:$VR,44:$VS,46:170,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb},o($V61,[2,38],{35:160,36:161,37:162,38:163,39:164,40:165,41:166,46:170,25:172,34:190,15:$VO,42:$VQ,43:$VR,44:$VS,47:$VT,49:$VU,51:$VV,69:$VW,71:$VX,74:$VY,75:$VZ,76:$V7,80:$V8,81:$V9,82:$Va,83:$Vb}),o($Vk,[2,132]),{109:[1,323]},{109:[1,324]},{19:[1,325]},{19:[1,326]},o($Vk,[2,133]),o($V71,[2,135],{123:327,124:$V41}),o($V01,[2,55]),o($V01,[2,57]),o($V71,[2,136])],
defaultActions: {2:[2,1],23:[2,108],25:[2,2],29:[2,109],32:[2,78],34:[2,111],48:[2,72],49:[2,73],50:[2,74],51:[2,75],52:[2,76],79:[2,112],80:[2,114],224:[2,51],225:[2,52],226:[2,53],262:[2,61],276:[2,60],303:[2,62],304:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 
    var indents = [0]
    var indent = 0
    var cant_existencia = 0
    var dedents = 0
    var  val_actual = ""/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("eninicio"); 
break;
case 1: console.log("tabulacion"); 
break;
case 2: this.begin("PYTHON"); return 5; 
break;
case 3: /*espacios en blanco*/ 
break;
case 4: /*tabulacion*/ 
break;
case 5: cant_existencia = 0; this.begin("INDENT"); return 102; 
break;
case 6: this.begin("JAVA"); return 7 
break;
case 7: return 69; 
break;
case 8: return 70; 
break;
case 9: return 124; 
break;
case 10: return 62; 
break;
case 11: return 64; 
break;
case 12: return 65; 
break;
case 13: return 85; 
break;
case 14: return 89; 
break;
case 15: return 86; 
break;
case 16: return 87; 
break;
case 17: return 88; 
break;
case 18: return 90; 
break;
case 19: return 91; 
break;
case 20: return 92; 
break;
case 21: return 60; 
break;
case 22: return 93; 
break;
case 23: return 94; 
break;
case 24: return 95; 
break;
case 25: return 96; 
break;
case 26: return 97; 
break;
case 27: return 98; 
break;
case 28: return yy_.yytext; 
break;
case 29: return 77; 
break;
case 30: return 100; 
break;
case 31: return 99; 
break;
case 32: return 101; 
break;
case 33: return 15; 
break;
case 34: cant_existencia += 1; 
break;
case 35: cant_existencia += 1; 
break;
case 36: cant_existencia = 0; 
break;
case 37: 
                                            var cant = indent - cant_existencia;
                                            this.unput(yy_.yytext);
                                            if (cant==-1){
                                                indent = cant_existencia;
                                                this.begin('PYTHON');
                                                return 107;
                                            } else if (cant > 0){
                                                indent = cant_existencia;
                                                dedents = cant;
                                                this.begin('DEDENT');
                                            } else if (cant==0){
                                                dedents = 0;
                                                this.begin('PYTHON');
                                            } else {
                                                var cuantos = (cant*-1)-1;
                                                this.begin('PYTHON');
                                                indent++;
                                                return 107;
                                            } 
                                        
break;
case 38:
                                            this.unput(yy_.yytext);
                                            if (dedents!=0){
                                                dedents--;
                                                return 109;
                                            } else {
                                                this.begin("PYTHON");
                                            }
                                        
break;
case 39:  
break;
case 40: this.begin("PROGRAMA"); return 9; 
break;
case 41: return 69; 
break;
case 42: return 70; 
break;
case 43: return 62; 
break;
case 44: return 63; 
break;
case 45: return 64; 
break;
case 46: return 65; 
break;
case 47: return 85; 
break;
case 48: return 89; 
break;
case 49: return 86; 
break;
case 50: return 87; 
break;
case 51: return 88; 
break;
case 52: return 90; 
break;
case 53: return 91; 
break;
case 54: return 92; 
break;
case 55: return 60; 
break;
case 56: return 93; 
break;
case 57: return 94; 
break;
case 58: return 95; 
break;
case 59: return 96; 
break;
case 60: return 97; 
break;
case 61: return 98; 
break;
case 62: return yy_.yytext; 
break;
case 63: return 100; 
break;
case 64: return 77; 
break;
case 65: return 99; 
break;
case 66: return 101; 
break;
case 67: return 15; 
break;
case 68: /*nada*/ 
break;
case 69: return 10; 
break;
case 70: return 4; 
break;
}
},
rules: [/^(?:[\ \n]+)/,/^(?:[\t])/,/^(?:(%%PYTHON\b))/,/^(?:[\ ]+)/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:(%%JAVA\b))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:((continue|finally|jison |global|assert|except|import|lambda|raise|class|print|break|while|yield|from|elif|else|with|pass|exec|and|del|not|def|for|try|as|or|if|input|in|is|range\b)|(>>=|<<=|\*\*=|\/\/=|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|\*\*|\/\/|<<|>>|<=|>=|==|!=|<>|\+|-|\*|\/|%|&|\||\^|~|<|>|\(|\)|\[|\]|\{|\}|@|,|:|\.|`|=|;|'|\|\|")))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:\t)/,/^(?:\t)/,/^(?:(\r?\n)+)/,/^(?:.)/,/^(?:.)/,/^(?:[\ \n\t\s\r]+)/,/^(?:%%PROGRAMA\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:>=)/,/^(?:<)/,/^(?:<=)/,/^(?:(public|private|class|extends|intinput|floatinput|charinput|int|String|char|float|boolean|true|false|else|while|for|do|break|continue|return|\(|\)|\{|\}|,|:|;|,|void|case|switch|default|println|print\b))/,/^(?:(([0]|[1-9][0-9]*)(\.[0-9]+)))/,/^(?:(([0]|[1-9][0-9]*)))/,/^(?:("(([^\\\n\"])|(\\.))*"))/,/^(?:('(([^\\\n\'])|(\\.))*'))/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|(([0]|[1-9][0-9]*))|_)*))/,/^(?:[\ \n\t\s\r]+)/,/^(?:hola\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,70],"inclusive":true},"PYTHON":{"rules":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,70],"inclusive":true},"DEDENT":{"rules":[38,70],"inclusive":true},"INDENT":{"rules":[34,35,36,37,70],"inclusive":true},"JAVA":{"rules":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70],"inclusive":true},"PROGRAMA":{"rules":[68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}